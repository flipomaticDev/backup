<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>FlipoMatic NFT</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.0/axios.min.js" integrity="sha256-S1J4GVHHDMiirir9qsXWc8ZWw74PHHafpsHp5PXtjTs=" crossorigin="anonymous"></script>
  </head>
  <body>
    <style>
        @font-face {
            font-family: 'Dogicapixelbold';
            src: local('Dogicapixelbold'), url('https://flipomatic.io/an/dogicapixelbold.ttf') format('truetype');
            font-weight: bold;
            font-style: normal;
        }

      html {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        background-color: black;
        color: white;
        font-family: 'Dogicapixelbold';
      },
      div {
          overflow: hidden;
       },

      img {
          overflow: hidden;
       }       

  .bottom-left {
      position: fixed;
      top: 465px;
      left: 29px;
      font-size: 1.8rem;
    } 

  .bottom-right {
      position: fixed;
      top: 465px;
      left: 405px;
      font-size: 1.8rem;
    } 




    </style>
    <script>

      async function gatherGRT(id){
            var url = "https://api.thegraph.com/subgraphs/name/flipomaticdev/flipo"
            const json =  JSON.stringify({query: `{
                  nftcontracts(first:1, where: {tokenId: 135}){
                    id
                    tokenId
                    date
                    level
                    volume
                    referalFees
                    owner
                  }
        }`})
            const headers = {
                      'content-type': 'application/json',
            }
            axios.post(url,json,headers).then(async response => {
                            const level = response["data"]["data"]["nftcontracts"]["0"]["level"]
                            let taxes = level /100 * 3
                            taxes = (Math.round(taxes * 100) / 100).toFixed(2);
                            if (taxes === 0)
                                 await replaceLevelTaxes(level.toString(),"0.00")
                            else
                                await replaceLevelTaxes(level.toString(),taxes.toString())
                           }

                )
      }
    
      async function replaceLevelTaxes(level, taxes){
        var url = "https://flipomatic.io/images/"+level
            axios({
                    url: url,
                    method: 'GET',
                    responseType: 'blob',
                         }).then(async response => {
                            var reader = new window.FileReader();
                            reader.readAsText(response.data); 
                            reader.onload = function() {
                            var imageDataUrl = reader.result;
                            var img1 = imageDataUrl.replace(/SETTAXES/,taxes.substr(0,4))
                            var img2 = img1.replace(/SETLEVEL/,level.padStart(3,'0'))
                            var newUrl = 'data:image/svg+xml;base64, '+btoa(imageDataUrl)
                            var $nextImage = document.createElement('img');
                            $nextImage.setAttribute("type", "image/svg+xml");
                            $nextImage.setAttribute("src", newUrl);
                            $nextImage.setAttribute("height", "500px");
                            $nextImage.setAttribute("width", "500px");
                            document.body.appendChild($nextImage);

                            document.getElementById("taxes").innerHTML = taxes.substr(0,5)
                            document.getElementById("level").innerHTML = level.padStart(3,'0')
                        } 
                 })
      }

      async function sleep(time) {
        return new Promise((resolve) => setTimeout(resolve, time));
      }

      async function tick() {
          await gatherGRT()
          //setTimeout(tick, 1000);
      }
     tick();
    </script>
    <div class="bottom-left" id="taxes"></div>
    <div class="bottom-right" id="level"></div>
  </body>
</html>
